/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    // Used for code formatting
    // https://plugins.gradle.org/plugin/com.github.sherter.google-java-format
    id 'com.github.sherter.google-java-format' version '0.9'

    id 'maven-publish'
    id 'maven'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}
ext {
  kafkaVersion = '2.7.2'
}

dependencies {
    implementation "org.apache.kafka:kafka-streams:${kafkaVersion}"

    // Used for fatjar excuting showing console when using command "java -jar ./build/libs/hello-streams-all.jar"
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'org.slf4j:slf4j-simple:1.7.36'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

    // test dependencies
    testImplementation "org.apache.kafka:kafka-streams-test-utils:${kafkaVersion}" 
    testImplementation 'org.assertj:assertj-core:3.22.0'
}

application {
    // Define the main class for the application.
    mainClassName = 'com.example.DslExample'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

// code formatting
tasks.withType(JavaCompile).configureEach { javaCompile ->
  javaCompile.dependsOn 'googleJavaFormat'
  options.compilerArgs << "-Xlint:deprecation"
  options.encoding = 'UTF-8'
}

task runDSL(type: JavaExec) {
    main = 'com.example.DslExample'
    classpath sourceSets.main.runtimeClasspath
}

task runProcessorAPI(type: JavaExec) {
    main = 'com.example.ProcessorApiExample'
    classpath sourceSets.main.runtimeClasspath
}

// the GAV of the generated POM can be set here
// gradle generatePomFileForMavenPublication
// gradle publishToLocalRepo
// build/publications/maven subfolder, a file called pom-default.xml.
publishing {
    publications {
        maven(MavenPublication) {          
            pom{
              name = 'hello-streams'
              groupId = 'com.magicalpipelines'
              artifactId = 'hello-streams'
              version = '1.0.0-SNAPSHOT'
              properties = [
                    "java.version": "1.8",
                    "avro.version": "1.11.0",
                    "kafka.version": "2.7.2",
                    "project.build.sourceEncoding": "UTF-8"
                ]
            }
            from components.java
        }
    }
}

// gradle writeNewPom
// build/newpom.xml
task writeNewPom doLast {
    pom {
        project {
            groupId 'com.magicalpipelines'
            artifactId 'hello-streams'
            version '1.0.0-SNAPSHOT'
        
            inceptionYear '2022'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
           
        }
        
    }.writeTo("$buildDir/newpom.xml")
}